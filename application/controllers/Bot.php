<?php
class Bot extends CI_Controller {

    private $confirmationToken  = 'c84eed8c'; // –°—Ç—Ä–æ–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 
    private $token  = '9594c9adc40b97fc32d34f3e0cba2eff303803b289f237269970afc8c3adce78a30dfd221d3b7243625a8'; // –ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
    private $secretKey = 'TOoo56FFFbbgg'; // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
    private $code = '666^^^888'; // –ö–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
    public $versionApiVk = '5.73';

    /*
        –ß—Ç–µ–Ω–∏–µ –±–æ—Ç–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –≤–∫
    */

    public function read()
    {
        if (!isset($_REQUEST)) {
            return;
        }

        $data = json_decode(file_get_contents('php://input'));

        if($data === null) {
            return;
        }

        switch ($data->type) {
            case 'confirmation':
                $this->confirmation($this->code);
                break;    
            case 'message_new':
                $this->message_new($data->object->user_id,$data->object->body);
                break;
            case 'message_reply' :
                header('HTTP/1.1 200 OK');
                echo 'ok';
                break;
            case 'group_join':
                $this->group_join($data->object->user_id);
                break;
            case 'group_leave':
                $this->group_leave($data->object->user_id);
                break;
            default :
                header('HTTP/1.1 200 OK');
                echo 'ok';
        }
    }

    /*
        –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    */

    public function group_join($id)
    {
        $userGroupJoin = $this->user_info($id);
        $request_params = array(
            'message'       => $userGroupJoin['generalInformation']['first_name'] .  ','  . ' –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É ‚ù§‚ù§‚ù§',
            'user_id'       => $id,
            'access_token'  => $this->token,
            'read_state'    => 1,
            'v'             => $this->versionApiVk
        );
        $get_params = http_build_query($request_params);
        
        file_get_contents('https://api.vk.com/method/messages.send?' . $get_params);
        header('HTTP/1.1 200 OK');
        echo('ok');
    }

    /*
        –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥—Ä—É–ø–ø—É
    */

    public function group_leave($id)
    {
        $userGroupLeave = $this->user_info($id);
        $request_params = array(
            'message'       => $userGroupLeave['generalInformation']['first_name'] .  ','  . ' –ú–Ω–µ –∂–∞–ª—å, —á—Ç–æ —Ç—ã —É—Ö–æ–¥–∏—à—å üò∞üò∞üò∞',
            'user_id'       => $id,
            'access_token'  => $this->token,
            'read_state'    => 1,
            'v'             => $this->versionApiVk
        );
        $get_params = http_build_query($request_params);
        
        file_get_contents('https://api.vk.com/method/messages.send?' . $get_params);
        header('HTTP/1.1 200 OK');
        echo('ok');
    }

    /*
        –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
    */

    public function confirmation($code = '')
    {
        if($code === $this->code){
            echo $this->confirmationToken;

        } else {
            return;
        }
    }

    /*
        –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        @param $fromId –û—Ç –∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        @param $messageBody –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    */

    public function message_new($fromId,$messageBody)
    {
        $user_info_message = $this->user_info($fromId);

        switch($messageBody) {
            case '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' :
                $message = $user_info_message['generalInformation']['first_name'] . ',' . 
                ' –¥–µ—Ä–∂–∏ —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:<br> ' . 
                '<br> 1) –í –æ–±—â–µ–º '. $user_info_message['statistics']['totalLikesPhotosProfile'] .  ' ‚ù§ –≤ —Ç–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ!' .
                '<br> 2) –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...' ;
                break;
            default:
            $message = '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã —è –Ω–µ –∑–Ω–∞—é )= <br><br>' .
                        '1. –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥–∞ `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞` ';
            break;
        }

        $request_params = array(
            'message'       => $message,
            'user_id'       => $user_info_message['generalInformation']['id'],
            'access_token'  => $this->token,
            'read_state'    => 1,
            'v'             => $this->versionApiVk
        );

        $get_params = http_build_query($request_params);
        
        file_get_contents('https://api.vk.com/method/messages.send?' . $get_params);
        header('HTTP/1.1 200 OK');
        echo('ok');

    }

    /*
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ id
    */

    public function user_info(int $id)
    {
        // –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        $generalInformation = json_decode(file_get_contents("https://api.vk.com/method/users.get?user_ids={$id}&lang=ru&v=5.0"))->response[0];

        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        $totalLikesPhotosProfile = 0;
        $userPhotosProfile = json_decode(file_get_contents("https://api.vk.com/method/photos.get?owner_id={$id}&album_id=profile&extended=1&v={$this->versionApiVk}"));
        foreach($userPhotosProfile->response->items as $item) {
            $totalLikesPhotosProfile += $item->likes->count;

        }

        return [
            'statistics'    => [
                'totalLikesPhotosProfile'   => $totalLikesPhotosProfile
            ],
            'generalInformation'    => [
                'first_name'    =>  $generalInformation->first_name,
                'last_name'     =>  $generalInformation->last_name,
                'id'            =>  $generalInformation->id
            ]
        ];
    }
}